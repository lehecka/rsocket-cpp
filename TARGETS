cpp_library(
    name = 'internal',

    header_namespace = 'src',
    headers = subdir_glob([
        ('src', '**/*.h')
    ]),
    srcs = [
        'src/Common.cpp',
        'src/Executor.cpp',
        'src/Frame.cpp',
        'src/FrameSerializer.cpp',
        'src/Payload.cpp',
        'src/versions/FrameSerializer_v0.cpp',
        'src/versions/FrameSerializer_v0_1.cpp',
        'src/versions/FrameSerializer_v1_0.cpp',
    ],
    deps = [
        '@/folly/futures:futures',
        '@/lithium/reactive-streams-cpp:reactive-streams',
    ],
)

# A target, on which implementations of various pluggable strategies depend.
# Contains minimal amount of code needed to implement those strategies.
cpp_library(
    name = 'plugins',

    headers = [
        'src/DuplexConnection.h',
        'src/Frame.h',
        'src/Payload.h',
        'src/framed/FramedReader.h',
        'src/framed/FramedWriter.h',
        'src/framed/FramedDuplexConnection.h',
        'src/folly/FollyKeepaliveTimer.h',
        'src/StackTraceUtils.h',
        'src/Stats.h',
    ],
    srcs = [
        'src/framed/FramedReader.cpp',
        'src/framed/FramedWriter.cpp',
        'src/framed/FramedDuplexConnection.cpp',
        'src/folly/FollyKeepaliveTimer.cpp',
    ],
    deps = [
        ':internal',
        ':streams',
        '@/folly:exception_wrapper',
        '@/folly/io:iobuf',
        '@/folly/io/async:async',
    ],
)

cpp_library(
    name = 'reactivesocket',

    headers = [
        'src/Common.h',
        'src/ClientResumeStatusCallback.h',
        'src/EnableSharedFromThis.h',
        'src/FrameTransport.h',
        'src/NullRequestHandler.h',
        'src/Payload.h',
        'src/RequestHandler.h',
        'src/ServerConnectionAcceptor.h',
        'src/ReactiveSocket.h',
        'src/Stats.h',
        'src/StreamsFactory.h',
        'src/SubscriberBase.h',
        'src/SubscriptionBase.h',
    ],
    srcs = glob([
        'src/AbstractStreamAutomaton.cpp',
        'src/statemachine/*.cpp',
        'src/ConnectionAutomaton.cpp',
        'src/ConnectionSetupPayload.cpp',
        'src/FrameTransport.cpp',
        'src/NullRequestHandler.cpp',
        'src/Payload.cpp',
        'src/RequestHandler.cpp',
        'src/ResumeCache.cpp',
        'src/ServerConnectionAcceptor.cpp',
        'src/ReactiveSocket.cpp',
        'src/Stats.cpp',
        'src/StreamState.cpp',
        'src/StreamsFactory.cpp',
    ]),
    deps = [
        ':internal',
        ':streams',
        '@/folly/futures:futures',
        '@/folly/io:iobuf',
        '@/folly:exception_wrapper',
    ],
    compiler_flags=['-DREACTIVE_SOCKET_EXTERNAL_STACK_TRACE_UTILS'],
)

cpp_library(
    name = 'tcp-internal',

    header_namespace = "src",
    headers = subdir_glob([
        ('src/tcp', '**/*.h'),
    ]),
    deps = [
        ':internal',
    ],
)

cpp_library(
    name = 'tcp',
    headers = [
        'src/tcp/TcpDuplexConnection.h',
    ],
    srcs = [
        'src/tcp/TcpDuplexConnection.cpp',
    ],
    deps = [
        ':tcp-internal',
        '@/lithium/reactive-streams-cpp:reactive-streams',
        '@/folly/io/async:async',
    ],
    compiler_flags=['-DREACTIVE_SOCKET_EXTERNAL_STACK_TRACE_UTILS'],
)

cpp_library(
    name='inline-conn',
    headers=[
        'test/InlineConnection.h',
    ],
    srcs=[
        'test/InlineConnection.cpp',
    ],
    deps=[
        ':reactivesocket',
        ':streams-mocks',
    ],
    external_deps=[
        ('googletest', None, 'gmock'),
    ],
)

cpp_unittest(
    name = 'tests',

    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob([
        'test/*.cpp',
        'test/folly/*.cpp',
        'test/framed/*.cpp',
        'test/automata/*.cpp',
        'test/simple/*.cpp',
        ]),
    deps = [
        ':internal',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
    ],
    external_deps = [
        ('googletest', None, 'gmock'),
        ('googletest', None, 'gtest'),
    ],
)

cpp_library(
    name='tests-internal',
    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs=[
        'test/simple/StatsPrinter.cpp',
    ],
    deps=[
        ':reactivesocket',
    ],
)

cpp_binary(
    name = 'tck-server',
    header_namespace = 'tck-test',
    headers = subdir_glob([
        ('tck-test', '**/*.h'),
    ]),
    srcs = glob([
        'tck-test/server.cpp',
        'tck-test/MarbleProcessor.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        ':tests-internal',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io/async:server_socket',
    ],
)

cpp_binary(
    name = 'tck-client',
    header_namespace = 'tck-test',
    headers = subdir_glob([
        ('tck-test', '**/*.h'),
    ]),
    srcs = glob([
        'tck-test/client.cpp',
        'tck-test/TestFileParser.cpp',
        'tck-test/TestInterpreter.cpp',
        'tck-test/TestSubscriber.cpp',
        'tck-test/TestSuite.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io/async:server_socket',
    ],
)

cpp_binary(
    name = 'test-resumeclient',
    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob([
        'test/resume/TcpResumeClient.cpp',
        'test/simple/*.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
    ],
)

cpp_binary(
    name = 'test-resumeserver',
    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob([
        'test/resume/TcpResumeServer.cpp',
        'test/simple/*.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io/async:server_socket',
    ],
)

cpp_binary(
    name = 'test-tcpclient',
    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob([
        'test/tcp/TcpClient.cpp',
        'test/simple/*.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io/async:server_socket',
    ],
)

cpp_binary(
    name = 'test-tcpserver',
    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob([
        'test/tcp/TcpServer.cpp',
        'test/simple/*.cpp',
        ]),
    deps = [
        ':tcp',
        ':reactivesocket',
        ':plugins',
        ':streams-mocks',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io/async:server_socket',
    ],
)

# Compatibility target for ReactiveStreams API.
cpp_library(
    name = 'streams',

    headers = ['src/ReactiveStreamsCompat.h',],
    deps = ['@/lithium/reactive-streams-cpp:reactive-streams',],
)

# Compatibility target for ReactiveStreams mocking helpers.
cpp_library(
    name = 'streams-mocks',

    headers = ['test/ReactiveStreamsMocksCompat.h', 'test/streams/Mocks.h'],
    deps = ['@/lithium/reactive-streams-cpp:reactive-streams-mocks',],
)

cpp_library(
    name = 'rsocket',

    header_namespace = "rsocket",
    headers = subdir_glob([
        ('experimental/rsocket', '**/*.h'),
        ('experimental/rsocket/facebook', '**/*.h'),
        ('experimental/rsocket/transports', '**/*.h'),
    ]),
    srcs = glob([
        'experimental/rsocket-src/*.cpp',
        'experimental/rsocket-src/facebook/transports/*.cpp', #TODO: move to rsocket/transports
        'experimental/rsocket-src/transports/*.cpp', #TODO: move to rsocket/transports
    ]),
    deps = [
        ':reactivesocket',
        ':internal',
        ':streams',
        ':tcp',
        '@/folly/futures:futures',
        '@/folly/io/async:async',
        '@/folly/io/async:server_socket',
        '@/folly/io/async:scoped_event_base_thread',
        '@/folly/io:iobuf',
        '@/folly:exception_wrapper',
        '@/rsocket/dev/experimental/yarpl:yarpl',
    ],
    compiler_flags=['-DREACTIVE_SOCKET_EXTERNAL_STACK_TRACE_UTILS'],
)
